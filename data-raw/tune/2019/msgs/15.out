> 
> # parse arguments
> args <- R.utils::commandArgs(trailingOnly = FALSE, asValues = TRUE)
> index <- as.integer(args$index)
> year <- as.character(args$year)
> nreps <- as.integer(args$nreps)
> seed <- as.integer(args$seed)
> 
> # get number of cores
> wkrs <- length(future::availableWorkers())
> 
> # set seed
> set.seed(seed)
> 
> # read and prepare the cluster features
> fp <- file.path('data-raw', 'features', year)
> clf <-
+   read_features(fp, pattern = 'paris.', recursive = FALSE)
> clf <- prepare_features(
+   clf,
+   feature_map = feature_map,
+   category = c('response', 'bio', 'net'),
+   type = 'list',
+   exclusions = c(
+     'mg2_pairs_count',
+     'mg2_not_pairs_count',
+     'mg2_portion_families_recovered',
+     'cluster_origin',
+     'bocc_origin',
+     'cluster_method',
+     'subcluster_method',
+     'year',
+     'IDs',
+     'go_sig_threshold',
+     'num_new_edges_on_any_node',
+     'HPO_ratio'
+   ),
+   verbose = TRUE
+ )
c('HPO_ratio', 'IDs', 'bocc_origin', 'cluster_method', 'cluster_origin', 'go_sig_threshold', 'max_norm_cell_type_comma_sep_string', 'max_norm_disease_comma_sep_string', 'mg2_not_pairs_count', 'mg2_pairs_count', 'mg2_portion_families_recovered', 'num_new_edges_on_any_node', 'sig_go_enrichment_fdr_corrected_p_vals', 'sig_go_enrichment_p_vals', 'sig_go_enrichment_terms', 'subcluster_method', 'year')

> 
> # prepare grid of parameters
> xgboost_params <- dials::parameters(
+   nrounds = dials::trees(),
+   eta = dials::learn_rate(),
+   gamma = dials::loss_reduction(),
+   dials::tree_depth(),
+   subsample = dials::sample_prop(),
+   rate_drop = dials::dropout(),
+   skip_drop = dials::dropout()
+ )
> xgboost_params <-
+   dials::grid_max_entropy(xgboost_params, size = nreps)
> 
> # tune the dart booster
> dart.param <-
+   list(
+     booster = "dart",
+     objective = "reg:logistic",
+     eval_metric = "rmse",
+     nthread = wkrs,
+     max_depth = xgboost_params$tree_depth[index],
+     eta = xgboost_params$eta[index],
+     gamma = xgboost_params$gamma[index],
+     subsample = xgboost_params$subsample[index],
+     rate_drop = xgboost_params$rate_drop[index],
+     skip_drop = xgboost_params$skip_drop[index]
+   )
> dart.cv <- xgboost::xgb.cv(
+   params = dart.param,
+   nrounds = xgboost_params$nrounds[index],
+   data = as.matrix(clf[, -1]),
+   nfold = 5,
+   label = clf$snowballing_pvalue,
+   early_stopping_rounds = 50
+ )
[1]	train-rmse:0.417713+0.001019	test-rmse:0.417692+0.004059 
Multiple eval metrics are present. Will use test_rmse for early stopping.
Will train until test_rmse hasn't improved in 50 rounds.

[2]	train-rmse:0.417713+0.001019	test-rmse:0.417691+0.004059 
[3]	train-rmse:0.417713+0.001019	test-rmse:0.417691+0.004059 
[4]	train-rmse:0.417713+0.001019	test-rmse:0.417691+0.004059 
[5]	train-rmse:0.417713+0.001019	test-rmse:0.417691+0.004059 
[6]	train-rmse:0.417713+0.001019	test-rmse:0.417691+0.004059 
[7]	train-rmse:0.417712+0.001019	test-rmse:0.417691+0.004059 
[8]	train-rmse:0.417712+0.001019	test-rmse:0.417691+0.004059 
[9]	train-rmse:0.417712+0.001019	test-rmse:0.417691+0.004059 
[10]	train-rmse:0.417712+0.001019	test-rmse:0.417691+0.004059 
[11]	train-rmse:0.417712+0.001019	test-rmse:0.417691+0.004059 
[12]	train-rmse:0.417712+0.001019	test-rmse:0.417691+0.004059 
[13]	train-rmse:0.417712+0.001019	test-rmse:0.417690+0.004059 
[14]	train-rmse:0.417712+0.001019	test-rmse:0.417690+0.004059 
[15]	train-rmse:0.417712+0.001019	test-rmse:0.417690+0.004059 
[16]	train-rmse:0.417712+0.001019	test-rmse:0.417690+0.004059 
[17]	train-rmse:0.417712+0.001019	test-rmse:0.417690+0.004059 
[18]	train-rmse:0.417711+0.001019	test-rmse:0.417690+0.004059 
[19]	train-rmse:0.417711+0.001019	test-rmse:0.417690+0.004059 
[20]	train-rmse:0.417711+0.001019	test-rmse:0.417690+0.004059 
[21]	train-rmse:0.417711+0.001019	test-rmse:0.417690+0.004059 
[22]	train-rmse:0.417711+0.001019	test-rmse:0.417690+0.004059 
[23]	train-rmse:0.417711+0.001019	test-rmse:0.417690+0.004059 
[24]	train-rmse:0.417711+0.001019	test-rmse:0.417689+0.004059 
[25]	train-rmse:0.417711+0.001019	test-rmse:0.417689+0.004059 
[26]	train-rmse:0.417711+0.001019	test-rmse:0.417689+0.004059 
[27]	train-rmse:0.417711+0.001019	test-rmse:0.417689+0.004059 
[28]	train-rmse:0.417710+0.001019	test-rmse:0.417689+0.004059 
[29]	train-rmse:0.417710+0.001019	test-rmse:0.417689+0.004059 
[30]	train-rmse:0.417710+0.001019	test-rmse:0.417689+0.004059 
[31]	train-rmse:0.417710+0.001019	test-rmse:0.417689+0.004059 
[32]	train-rmse:0.417710+0.001019	test-rmse:0.417689+0.004059 
[33]	train-rmse:0.417710+0.001019	test-rmse:0.417689+0.004059 
[34]	train-rmse:0.417710+0.001019	test-rmse:0.417688+0.004059 
[35]	train-rmse:0.417710+0.001019	test-rmse:0.417688+0.004059 
[36]	train-rmse:0.417710+0.001019	test-rmse:0.417688+0.004059 
[37]	train-rmse:0.417710+0.001019	test-rmse:0.417688+0.004059 
[38]	train-rmse:0.417710+0.001019	test-rmse:0.417688+0.004059 
[39]	train-rmse:0.417709+0.001019	test-rmse:0.417688+0.004059 
[40]	train-rmse:0.417709+0.001019	test-rmse:0.417688+0.004059 
[41]	train-rmse:0.417709+0.001019	test-rmse:0.417688+0.004059 
[42]	train-rmse:0.417709+0.001019	test-rmse:0.417688+0.004059 
[43]	train-rmse:0.417709+0.001019	test-rmse:0.417688+0.004059 
[44]	train-rmse:0.417709+0.001019	test-rmse:0.417688+0.004059 
[45]	train-rmse:0.417709+0.001019	test-rmse:0.417687+0.004059 
[46]	train-rmse:0.417709+0.001019	test-rmse:0.417687+0.004059 
[47]	train-rmse:0.417709+0.001019	test-rmse:0.417687+0.004059 
[48]	train-rmse:0.417709+0.001019	test-rmse:0.417687+0.004059 
[49]	train-rmse:0.417709+0.001019	test-rmse:0.417687+0.004059 
[50]	train-rmse:0.417708+0.001019	test-rmse:0.417687+0.004059 
[51]	train-rmse:0.417708+0.001019	test-rmse:0.417687+0.004059 
[52]	train-rmse:0.417708+0.001019	test-rmse:0.417687+0.004059 
[53]	train-rmse:0.417708+0.001019	test-rmse:0.417687+0.004059 
[54]	train-rmse:0.417708+0.001019	test-rmse:0.417687+0.004059 
[55]	train-rmse:0.417708+0.001019	test-rmse:0.417687+0.004059 
[56]	train-rmse:0.417708+0.001019	test-rmse:0.417686+0.004059 
[57]	train-rmse:0.417708+0.001019	test-rmse:0.417686+0.004059 
[58]	train-rmse:0.417708+0.001019	test-rmse:0.417686+0.004059 
[59]	train-rmse:0.417708+0.001019	test-rmse:0.417686+0.004059 
[60]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[61]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[62]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[63]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[64]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[65]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[66]	train-rmse:0.417707+0.001019	test-rmse:0.417686+0.004059 
[67]	train-rmse:0.417707+0.001019	test-rmse:0.417685+0.004059 
[68]	train-rmse:0.417707+0.001019	test-rmse:0.417685+0.004059 
[69]	train-rmse:0.417707+0.001019	test-rmse:0.417685+0.004059 
[70]	train-rmse:0.417707+0.001019	test-rmse:0.417685+0.004059 
[71]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[72]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[73]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[74]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[75]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[76]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[77]	train-rmse:0.417706+0.001019	test-rmse:0.417685+0.004059 
[78]	train-rmse:0.417706+0.001019	test-rmse:0.417684+0.004059 
[79]	train-rmse:0.417706+0.001019	test-rmse:0.417684+0.004059 
> hgrid <-
+   dplyr::bind_cols(xgboost_params[index, ], dart.cv$evaluation_log[dart.cv$best_iteration, ], best_iter = dart.cv$best_iteration)
> 
> # write result
> fname <- file.path('data-raw', 'tune', year, 'array', paste0('tune_', index, '.tsv'))
> readr::write_tsv(hgrid, file = fname)
> 
